#!/usr/bin/env python
"""
./albumimporter 
"""

import os
import re
import shutil
import subprocess
import sys
import tempfile
import urllib

from titlecase import titlecase

# monkeypatch eyeD3
import eyeD3

def getAlbumArtist(self):
   f = self.frames['TPE2'];
   if f:
      return f[0].text;
   else:
      return u"";
eyeD3.Tag.getAlbumArtist = getAlbumArtist

def setAlbumArtist(self, a):
   self.setTextFrame('TPE2', self.strToUnicode(a));
eyeD3.Tag.setAlbumArtist = setAlbumArtist

def _set(self, data, frameHeader):
  eyeD3.frames.TextFrame._set(self, data, frameHeader);
  if self.header.id[:2] != "TD" and self.header.minorVersion >= 4:
    print "[warning]: Invalid frame id for DateFrame: %s" % self.header.id
eyeD3.frames.DateFrame._set = _set

class MP3(object):
  def __init__(self, input_file, writable=False):
    self.input_file = input_file
    self.writable   = writable
    if not eyeD3.isMp3File(input_file):
      raise RuntimeError("eyeD3 can not parse %s" % input_file)

    self.audio_file   = eyeD3.Mp3AudioFile(input_file)
    self.tag          = self.audio_file.getTag()

    self.album_artist = self.tag.getAlbumArtist()
    self.album        = self.tag.getAlbum()
    self.year         = self.tag.getYear()
    self.disc_num     = self.tag.getDiscNum()[0]
    self.disc_total   = self.tag.getDiscNum()[1]
    self.track_num    = self.tag.getTrackNum()[0]
    self.track_total  = self.tag.getTrackNum()[1]
    self.artist       = self.tag.getArtist()
    self.title        = self.tag.getTitle()
    self.genre        = self.tag.getGenre() and self.tag.getGenre().name or None

  def __repr__(self):
    return u"<MP3 %s>" % self.__unicode__()

  def __unicode__(self, titlecase=None):
    return u"%s - %s - %s.mp3" % (self.track_num, self.artist, self.title)

  def update(self, metadata):
    if not self.writable:
      raise RuntimeError("%s was not set as writable" % self.input_file)

    self.tag.remove()
    self.tag.setAlbumArtist(metadata["album_artist"])
    self.tag.setAlbum(metadata["album"])
    self.tag.setDate(metadata["year"])
    self.tag.setDiscNum((metadata["disc_num"], metadata["disc_total"]))
    self.tag.setTrackNum((metadata["track_num"], metadata["track_total"]))
    self.tag.setArtist(metadata["artist"])
    self.tag.setTitle(metadata["title"])
    self.tag.setGenre(metadata["genre"])
    self.tag.addImage(0x03, metadata["artwork_file"]) # FRONT_COVER image type
    self.tag.update(eyeD3.ID3_V1_1 & eyeD3.ID3_V2_4)

class JPG(object):
  def __init__(self, input_file):
    self.input_file = input_file
    self.width, self.height, self.format = 0, 0, 'unknown'
    self.sips()

  def sips(self):
    stdout, stderr = subprocess.Popen(
      ['sips', '-g', 'pixelWidth', '-g', 'pixelHeight', '-g', 'format', self.input_file],
      stdout=subprocess.PIPE,
      stderr=subprocess.PIPE,
    ).communicate()
    matches = re.compile('pixelWidth: ([0-9]+)\s+pixelHeight: ([0-9]+)\s+ format: ([a-z]+)').search(stdout)
    (width, height, format) = matches.groups()
    self.width  = int(width)
    self.height = int(height)
    self.format = format
    if self.format == 'jpeg':
      self.format = 'jpg'

class Album(object):
  GENRES =  ['Pop', 'Rock', 'Jazz', 'R&B', 'Rap', 'Country', 'Blues', 'Electronic', 'Latin', 'Reggae', 'International', 'Classical']
  GENRES += ['Ambient', 'Folk', 'Soul', 'Singer/Songwriter', 'Hip Hop', 'Indie Rock', 'Pop Rock', 'Metal', 'Punk Rock']

  def __init__(self, input_dir, options):
    self.input_dir    = self.verify_dir(input_dir)
    self.output_dir   = self.verify_dir(options.output_dir)
    self.options      = options
    self.errors       = []
    self.max_path_len = 0

    self.mp3s = [MP3(f) for f in self.glob('.mp3')]
    self.jpgs = [JPG(f) for f in self.glob('.jpg', '.jpeg')]

    self.album_artist = self.guess_album_artist()
    self.album        = self.guess_album()
    self.year         = self.guess_year()
    self.artist       = self.guess_artist()
    self.genre        = self.guess_genre()

    if options.find_artwork:
      self.artwork      = self.guess_artwork()
    else:
      self.artwork      = None

    self.tracks       = self.guess_tracks()

    self.dest_dir = os.path.join(self.output_dir, self.tracks[0]['output_dir'])
    if options.mode != 'move':
      if os.path.exists(self.dest_dir):
        self.add_error("%s already exists." % self.dest_dir)

    if options.mode == 'preview':
      self.preview()
    elif options.mode == 'verify':
      pass
    elif options.mode == 'copy':
      self.copy()
    elif options.mode == 'move':
      self.move()

  def add_error(self, error):
    if error not in self.errors:
      self.errors.append(error)

  def raise_error(self):
    if len(self.errors) > 0:
      raise RuntimeError("\n".join(self.errors))

  def pre_preview(self):
    print "\n##########"
    print "## %s" % self.input_dir
    print "## => %s" % self.dest_dir
    print "##########"

  def preview(self):
    self.pre_preview()
    for track in self.tracks:
      self.preview_track(track)
    self.preview_artwork()

    self.raise_error()
    print ""

  def preview_track(self, track):
    path = "%s/%s" % (track['output_dir'], track['output_file'])
    path = path.ljust(self.max_path_len)
    print "%s [%02d/%02d, %02d/%02d, %s]" % (path, track['disc_num'], track['disc_total'], track['track_num'], track['track_total'], track['genre'])

  def preview_artwork(self):
    if self.artwork:
      print "%s [%sx%s %s]" % ("cover.jpg".ljust(self.max_path_len), self.artwork.width, self.artwork.height, self.artwork.format)

  def copy(self, overwrite=False):
    if len(self.errors) > 0:
      self.preview() # will abort with errors
    else:
      self.pre_preview()

    # create a clean temp temp_dir
    temp_dir = "/tmp/%s/" % self.tracks[0]['output_dir']
    try:
      shutil.rmtree(temp_dir)
    except OSError, e:
      pass
    os.mkdir(temp_dir)

    # copy files over to temp_dir and update tags
    for track in self.tracks:
      self.preview_track(track)
      temp_file = os.path.join(temp_dir, track['output_file'])
      shutil.copy(track['mp3'].input_file, temp_file)
      temp_mp3 = MP3(temp_file, writable=True)
      temp_mp3.update(track)

    # copy artwork over
    self.preview_artwork()
    temp_file = os.path.join(temp_dir, 'cover.jpg')
    shutil.copy(self.artwork.input_file, temp_file)

    # move the tempdir to destdir
    print "\nMoving to %s" % self.dest_dir
    args = ["rsync", "-va", temp_dir, self.dest_dir + '/']
    if overwrite:
      args.append('--delete')
    subprocess.check_call(args)
    shutil.rmtree(temp_dir)

    # import to iTunes
    print "\nAdding to iTunes"
    subprocess.check_call(["./addToITunesLibrary", self.dest_dir])

  def move(self):
    self.copy(overwrite=True)
    if self.input_dir != self.dest_dir:
      print "\nRemoving %s" % self.input_dir
      try:
        shutil.rmtree(self.input_dir)
      except OSError, e:
        print " Can't delete..!"
    else:
      print "\nLeaving %s... probably should user --update?" % self.input_dir

  def verify_dir(self, d):
    d = os.path.normpath(d)
    d = os.path.expanduser(d)
    if not os.path.isdir(d):
      raise RuntimeError("directory '%s' does not exist." % d)
    return d

  def glob(self, *exts):
    matches = []
    for root, sud_dirs, files in os.walk(self.input_dir):
      for file in files:
        if os.path.splitext(file)[1] in exts:
          matches.append(os.path.join(root,file))
    return matches

  def guess_album_artist(self):
    album_artist = self.options.album_artist or self.uniform('album_artist') or self.options.artist or self.uniform('artist')
    if not album_artist:
      self.add_error("Album artist could not be determined")
    return album_artist or "UNDEFINED"

  def guess_album(self):
    album = self.options.album or self.uniform('album')
    if not album:
      self.add_error("Album could not be determined")
    return album or "UNDEFINED"

  def guess_year(self):
    year = self.options.year or self.uniform('year')
    if not year:
      self.add_error("Year could not be determined")
    return year or "XXXX"

  def guess_artist(self):
    artist = self.options.artist or self.uniform('artist')
    return artist

  def guess_genre(self):
    genre_map = {
      'hip-hop':      'Hip Hop',
      'electronica':  'Electronic',
    }
    for genre in self.GENRES:
      genre_map[genre.lower()] = genre

    genre = self.options.genre or self.uniform('genre') or "UNDEFINED"
    if genre.lower() in genre_map.keys():
      genre = genre_map[genre.lower()]

    if genre not in self.GENRES:
      self.add_error("Genre %s not allowed." % genre)
    return genre

  def guess_artwork(self):
    for jpg in self.jpgs:
      if ('jpg', 500, 500) == (jpg.format, jpg.width, jpg.height):
        return jpg

    if self.options.force_artwork and len(self.jpgs) == 1:
      return jpg

    self.add_error("No 500x500 jpg could be found.")
    if self.options.mode == 'preview':
      search_url = "http://www.google.com/images?as_q=%s&hl=en&biw=1050&bih=572&btnG=Google+Search&as_epq=&as_oq=&as_eq=&as_sitesearch=&safe=images&as_st=y&tbs=isch:1,isz:ex,iszw:500,iszh:500,ift:jpg"
      search_url = search_url % urllib.quote("\"%s\" \"%s\"" % (self.album_artist, self.album))
      subprocess.Popen(["open", "/Applications/Google Chrome.app", search_url])

  def guess_tracks(self):
    """
    Collect the _desired_ metadata for the entire album.
    """
    # collect all track and make sure everyone has a track number
    tracks = []
    for mp3 in self.mp3s:
      if not mp3.track_num:
        raise RuntimeError('Track Number not present')
      tracks.append({
        'mp3':        mp3,
        'track_num':  mp3.track_num,
      })

    # is it one disc? (no repeating track_nums)
    is_single_disc  = len(self.mp3s) == len(set([mp3.track_num for mp3 in self.mp3s]))
    is_multi_disc   = not is_single_disc

    # are track numbers sorted?
    is_sorted = True
    last_track_num = -1
    for track in tracks:
      if track['track_num'] != last_track_num:
         if track['track_num'] != 1:
           is_sorted = False
    is_unsorted = not is_sorted

    if is_multi_disc and is_unsorted:
      raise RuntimeError('Disc Number not present for multidisc')

    # simple case: single disc
    if is_single_disc:
      for track in tracks:
        track['disc_num'] = 1

    # bit trickier; not necessarily a single disc but tracks are in order
    if is_sorted:
      disc_num = 0
      for track in tracks:
        if track['track_num'] == 1:
          disc_num += 1
        # assign the sequential value, but check with mp3 too
        if track['mp3'].disc_num:
          if track['mp3'].disc_num != disc_num:
            raise RuntimeError('Sequential disc number conflicts with tags')
        track['disc_num'] = disc_num

    # sort tracks by disc/track num and count totals
    disc_track_nums       = []
    disc_track_num_tracks = {}
    disc_totals = {}
    for track in tracks:
      disc_track_num = "%02d%02d" % (track['disc_num'], track['track_num'])
      disc_track_nums.append(disc_track_num)
      disc_track_num_tracks[disc_track_num] = track

      if track['disc_num'] not in disc_totals.keys():
        disc_totals[track['disc_num']] = 0
      disc_totals[track['disc_num']] += 1

    tracks  = []
    for disc_track_num in sorted(disc_track_nums):
      track = disc_track_num_tracks[disc_track_num]
      tracks.append(track)

    # collect all other metadata
    for track in tracks:
      mp3 = track['mp3']
      track['album_artist'] = self.album_artist or titlecase(mp3.album_artist).strip()
      track['album']        = self.album or titlecase(mp3.album).strip()
      track['year']         = self.year or mp3.year
      track['artist']       = self.artist or titlecase(mp3.artist).strip()
      track['title']        = titlecase(mp3.title).strip()
      track['genre']        = self.genre

      # disc/track nums were calculated in validation pass
      track['disc_total']     = len(disc_totals.keys())
      track['track_total']    = disc_totals[track['disc_num']]
      track['disc_track_num'] = "%02d" % track['track_num']
      if track['disc_total'] > 1:
        track['disc_track_num'] = "%d%02d" % (track['disc_num'], track['track_num'])

      if self.artwork:
        track['artwork_file'] = self.artwork.input_file

      track['output_dir']   = "%s - %s (%s)"    % (track['album_artist'], track['album'], track['year'])
      track['output_dir']   = track['output_dir'].replace('/', '_')
      track['output_file']  = "%s - %s - %s.mp3"  % (track['disc_track_num'], track['artist'], track['title'])
      track['output_file']  = track['output_file'].replace('/', '_')
      track['output_path']  = "%s/%s" % (track['output_dir'], track['output_file'])

      if len(track['output_path']) > self.max_path_len:
        self.max_path_len = len(track['output_path'])

    return tracks

  def uniform(self, attr):
    values = list(set([getattr(mp3, attr) for mp3 in self.mp3s]))
    if len(values) == 1 and values[0] != u'':
      return values[0]
    return None

if __name__ == "__main__":
  from optparse import OptionParser, OptionGroup
  parser = OptionParser(usage="usage: %prog [options] input_album_dir")

  group = OptionGroup(parser, "Metadata Options")
  group.add_option("--album-artist", default=None, help="Album Artist")
  group.add_option("--album", default=None, help="Album")
  group.add_option("--year", default=None, help="Year")
  group.add_option("--artist", default=None, help="Artist")
  group.add_option("--genre", default=None, help="Genre")

  group.add_option("--find-artwork", action="store_true", help="Find artwork on Google.")
  group.add_option("--force-artwork", action="store_true", help="Allow artwork of other dimensions.")
  group.add_option("--multiple", action="store_true", help="Apply options to multiple albums")
  parser.add_option_group(group)

  group = OptionGroup(parser, "File Options")
  group.add_option("-o", "--output-dir", default=".", help="Output directory. Default is '.'")
  group.add_option("-m", "--mode", default="preview", help="'preview' or 'copy' action. Default is 'preview'")
  parser.add_option_group(group)

  options, args = parser.parse_args()
  if len(args) < 1:
    parser.print_help()
    sys.exit(1)

  if len(args) > 1 and (options.album_artist or options.album or options.artist or options.genre) and not options.multiple:
    print "Error: metadata applied to multiple directories. Aborting."
    sys.exit(1)

  if len(args) > 20:
    options.find_artwork = False

  performed = []
  errored   = []
  for d in args:
    try:
      album = Album(d, options)
      performed.append(d)
    except RuntimeError, e:
      errored.append(d)
      print "\nERRORS: %s\nAborting." % e

  if options.mode in ['move', 'copy']:
    print "\nSUMMARY:"
    for d in performed:
      print "%s %s" % (options.mode, d)
    for d in errored:
      print "skipped %s" % d
