#!/usr/bin/env python
#./mp3org --mode=preview --output-directory=~/Music/Albums ~/Downloads/2006\ -\ It\'s\ Never\ Been\ Like\ That/

import os
import re
import shutil
import subprocess
import sys

import eyeD3

class Renamer(object):
  def __init__(self, input_dirs, output_dir):
    self.input_dirs = self.verify_dirs(*input_dirs)
    self.output_dir = self.verify_dirs(output_dir)[0]
    self.errors = []

  def add_error(self, error):
    if error not in self.errors:
      self.errors.append(error)

  def preview(self):
    output_files = sorted(self.prepare().values())
    print "PREVIEW:\n"
    for output_file in output_files:
      print output_file

    if self.errors:
      raise RuntimeError("\n" + "\n".join(self.errors))

    print "\nRe-run with --mode=copy to copy files."

  def copy(self, cleanup=False):
    rename_map = self.prepare()
    if self.errors:
      raise RuntimeError("\n" + "\n".join(self.errors))

    print "COPYING:\n"
    for input_file, output_file in sorted(rename_map.items()):
      head, tail = os.path.split(output_file)
      if not os.path.exists(head):
        os.makedirs(head)
      shutil.copyfile(input_file, output_file)
      print output_file

    if cleanup:
      print "\nDELETING:\n"
      for input_dir in self.input_dirs:
        print input_dir
        shutil.rmtree(input_dir)

    print "\nDone."

  def move(self):
    self.copy(cleanup=True)

  def verify_dirs(self, *dirs):
    verified_dirs = []
    for d in dirs:
      d = os.path.normpath(d)
      d = os.path.expanduser(d)
      if not os.path.isdir(d):
        raise RuntimeError("directory '%s' does not exist." % d)
      verified_dirs.append(d)
    return verified_dirs

  def prepare(self):
    rename_map = {}
    input_files = []

    # collect the files in all the directories recursively
    for input_dir in self.input_dirs:
      for root, sud_dirs, files in os.walk(input_dir):
        for file in files:
          input_files.append(os.path.join(root,file))

    # read metadata and prepare destination
    # verify that all input files have complete ID3 V2 tags and can be renamed, or else exit
    for input_file in input_files:
      if eyeD3.isMp3File(input_file):
        audiofile = eyeD3.Mp3AudioFile(input_file)
        tag = eyeD3.Tag()
        tag.link(input_file, eyeD3.ID3_V2)

        metadata  = {}
        frame_map = {
          'album_artist':  'TPE2',
          'album':         'TALB',
          'year':          'TDRC',
          'disc_number':   'TPOS',
          'track_number':  'TRCK',
          'artist':        'TPE1',
          'title':         'TIT2',
          'picture':       'APIC',
        }
        allowed_genres =  ['Pop', 'Rock', 'Jazz', 'R&B', 'Rap', 'Country', 'Blues', 'Electronic', 'Latin', 'Reggae', 'International', 'Classical']
        allowed_genres += ['Singer/Songwriter', 'Hip Hop']
        # Soul, Singer/Songwriter ?

        # validate presence of required fields
        for label in ['album_artist', 'album', 'year', 'track_number', 'artist', 'title', 'picture']:
          try:
            tag.frames[frame_map[label]][0]
          except IndexError, e:
            error = "Validation Error: %s tag is missing" % label
            if error not in self.errors:
              self.errors.append(error)

        # copy tag values over
        for label in ['album_artist', 'album', 'year', 'track_number', 'disc_number', 'artist', 'title']:
          try:
            metadata[label] = tag.frames[frame_map[label]][0].text
          except IndexError, e:
            metadata[label] = 'MISSING'
            if label == 'disc_number':
              metadata[label] = ''

        # validate format and parse number values
        for label in ['track_number', 'disc_number']:
          if metadata[label]:
            matches = re.compile("^([0-9]+)/([0-9]+)$").match(metadata[label])
            if matches:
              metadata[label] = int(matches.groups()[0])
              if int(matches.groups()[1]) == 1:
                self.add_error("Validation Error: %s tag should not be xx/1 format" % label)
            else:
              metadata[label] = 999
              error = "Validation Error: %s tag is not in xx/yy format" % label
              if error not in self.errors:
                self.errors.append(error)

        # validate genre
        genre = tag.getGenre().name
        if genre not in allowed_genres:
          error = "Validation Error: '%s' genre is not allowed" % genre
          if error not in self.errors:
            self.errors.append(error)

        # validate artwork
        tag.frames['APIC'][0].writeFile(path='/tmp', name='cover')
        stdout, stderr = subprocess.Popen(
          ['sips', '-g', 'pixelHeight', '-g', 'pixelWidth', '-g', 'format', '/tmp/cover'],
          stdout=subprocess.PIPE,
          stderr=subprocess.PIPE
        ).communicate()

        matches = re.compile('pixelHeight: ([0-9]+)\s+pixelWidth: ([0-9]+)\s+ format: ([a-z]+)').search(stdout)
        if matches:
          if not ('500', '500', 'jpeg') == matches.groups():
            args = tuple([metadata['album']] + list(matches.groups()))
            self.add_error("Validation Error: '%s' artwork is not 500x500 jpeg (%s %s %s)" % args)

        output_file = os.path.join(self.output_dir, 
          "%(album_artist)s - %(album)s (%(year)s)" % metadata,
          "%(disc_number)s%(track_number)02d - %(artist)s - %(title)s.mp3" % metadata
        )

        rename_map[input_file] = output_file
    return rename_map

if __name__ == "__main__":
  from optparse import OptionParser, OptionGroup
  parser = OptionParser(usage="usage: %prog [options] input_dir [input_dir2 ...]")

  parser.add_option("-o", "--output-dir", default=".", help="Output directory. Default is '.'")
  parser.add_option("-m", "--mode", choices=["preview", "copy", "move"], default="preview", help="'preview' or 'copy' action. Default is 'preview'")

  options, args = parser.parse_args()
  if len(args) < 1:
    parser.print_help()
    sys.exit(1)

  try:
    r = Renamer(input_dirs=args, output_dir=options.output_dir)
    r.__getattribute__(options.mode)()
    sys.exit(0)
  except RuntimeError, e:
    print "\nERRORS: %s" % e
    sys.exit(1)